spring:
  application:
    name: base_on_spring_boot # 应用名称
  datasource:
    druid:
      name: base_spring_boot
      url: jdbc:mysql://112.74.87.145:3306/base_spring_boot?serverTimezone=UTC&characterEncoding=utf-8
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: cqs_root
      password: cqs9527
      filters: stat # 监控统计
      initial-size: 2 # 初始化连接
      max-idle: 10 # 最大空闲连接数
      min-idle: 1 # 最小空闲连接数
      max-active: 20 # 最大活动连接
      max-wait: 60000 # 获取连接超时的等待时间
      time-between-eviction-runs-millis: 60000 # 间隔多久进行一次检测，检测需要关闭的空闲连接
      min-evictable-idle-time-millis: 300000 # 一个连接在池中最小生产的空间
      validation-query: SELECT 'x' # 验证连接有效与否的SQL
      test-while-idle: true # 指明连接是否被空闲连接回收器（如果有）进行检验，如果检验失败，则连接将被从池中去除
      test-on-borrow: false # 借出连接时不要测试，否则影响性能
    # sql数据初始化
#    schema:
#      - classpath*:sql/*.sql # 指定建表语句sql文件，需要提前建好
#    data:
#      - classpath*:sql/data/*.sql # 指定数据sql文件，需要提前建好
#    initialization-mode: always
  # ShardingSphere配置
  shardingsphere:
    enabled: true # 可在此开启或关闭
    ## 分库-读写分离
    datasource:
      common:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: cqs9527
      names: master,slave0,slave1 # 指定三个数据源名称
      master: # 配置第一个数据源
        url: jdbc:mysql://112.74.87.145:3306/base_spring_boot?serverTimezone=UTC&characterEncoding=utf-8
        username: cqs_root
      slave0: # 配置第二个数据源
        url: jdbc:mysql://112.74.87.145:3306/base_spring_boot?serverTimezone=UTC&characterEncoding=utf-8
        username: cqs_root
      slave1: # 配置第三个数据源
        url: jdbc:mysql://112.74.87.145:3306/base_spring_boot?serverTimezone=UTC&characterEncoding=utf-8
        username: cqs_root
    rules:
      ## 分库-读写分离
      replica-query:
        data-sources:
          ms: # 定义数据源名字
            primary-data-source-name: master # 指定主数据源
            replica-data-source-names: slave0,slave1 # 指定从数据源
            load-balancer-name: round_robin # 负载均衡算法名称
        load-balancers:
          round-robin:
            type: ROUND_ROBIN # 负载均衡算法配置
            props:
              workId: 1 # 负载均衡算法属性配置
      ## 分表
      sharding:
        bindingTables:
          - user
        tables:
          user:
            actualDataNodes: ms.user_$->{0..2} # 标准分片表配置：由数据源 + 表名组成，多个表以逗号分割
            tableStrategy:
              standard: # 配置分片场景
                shardingColumn: id # 分片列名称
                shardingAlgorithmName: table-inline # 分片算法名称
        keyGenerators: # 雪花算法配置
          snowflake:
            type: SNOWFLAKE
            props:
              worker-id: 123
        shardingAlgorithms: # 自定义分片算法
          table-inline:
            type: INLINE
            props:
              algorithm-expression: user_$->{id % 3}
    props:
      sql-show: true # 打印sql
server:
  port: 8080 # 应用服务 WEB 访问端口

mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 打印执行的sql语句
  mapper-locations:
    - classpath:com/caston/base_on_spring_boot/*/mapper/xml/*.xml # 指定xml所在位置
